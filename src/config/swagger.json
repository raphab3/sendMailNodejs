{
  "swagger": "2.0.0",
  "info": {
    "version": "1.0.0",
    "title": "FUNDAC API",
    "description": "A minimal and easy to follow example of what you need to create a CRUD style API in NodeJs using TypeScript",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "/",
      "description": "Local Dev, or from Heroku"
    },
    {
      "url": "/api/",
      "description": "With docker-compose and nginx proxy"
    }
  ],

  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "JWT": {
      "type": "apiKey",
      "name": "token",
      "in": "header"
    }
  },
  "tags": [
    {
      "name": "Sessions",
      "description": "API for sessions in the system"
    },
    {
      "name": "Pessoas",
      "description": "API for pessoas in the system"
    }
  ],
  "paths": {
    "/sessions": {
      "post": {
        "tags": ["Sessions"],
        "summary": "Create a new token in system",
        "requestBody": {
          "description": "My Token",
          "required": true,
          "content": {
            "application/json": {
              "schema": {}
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Failed. Bad post data."
          }
        }
      }
    },

    "/api/v1/pessoas": {
      "get": {
        "tags": ["Pessoas"],

        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get all cats in system",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": ["Pessoas"],
        "summary": "Create a new cat in system",
        "requestBody": {
          "description": "Cat Object",
          "required": true,
          "content": {
            "Authorization": {},
            "application/json": {
              "schema": {}
            }
          }
        },
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {}
          },
          "400": {
            "description": "Failed. Bad post data."
          }
        }
      }
    },
    "/pessoas/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of the cat that we want to match",
          "type": "string"
        }
      ],
      "get": {
        "tags": ["Pessoas"],
        "summary": "Get cat with given ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Cat with id",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {}
          },
          "404": {
            "description": "Failed. Cat not found."
          }
        }
      },
      "put": {
        "summary": "Update cat with given ID",
        "tags": ["Pessoas"],
        "requestBody": {
          "description": "Cat Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {}
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Cat with new values of properties",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {}
          },
          "400": {
            "description": "Failed. Bad post data."
          },
          "404": {
            "description": "Failed. Cat not found."
          }
        }
      },
      "delete": {
        "summary": "Delete cat with given ID",
        "tags": ["Pessoas"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Delete Cat with id",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {}
          },
          "404": {
            "description": "Failed. Cat not found."
          }
        }
      }
    }
  }
}
